#!/usr/bin/env python3
'''
    Zodical light calculator
       Based on Tsumura-san's table
        Ver. 1.0  2020/11/02   H. Akitaya
          Unit: lambda*I(lambda) [nW/m^2/sr]
'''

import sys

ZL_SPEC_FN = 'ZLspectrum.txt'
ZL_ECLIPLAT_FN = 'ZL_ecliptic_profile.txt'

# normalization flux (flux at ecliptic latitude at 0 deg)
ZL_ECLIPLAT_NORM = 691.82538

class ZodicalLight(object):
    def __init__(self):
        self.zl_spec = []
        self.zl_ecliplat = []
        pass

    def read_data_zl_spec(self, fn=ZL_SPEC_FN):
        with open(fn, 'r') as f:
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                items = line.strip().split()
                if len(items) != 3:
                    continue
                self.zl_spec.append([float(items[0]), float(items[1]),
                                     float(items[2])])

    def read_data_zl_ecliplat(self, fn=ZL_ECLIPLAT_FN):
        with open(fn, 'r') as f:
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                items = line.strip().split()
                if len(items) != 2:
                    continue
                self.zl_ecliplat.append([float(items[0]), float(items[1])])

    def read_data_all(self):
        zl.read_data_zl_spec()
        zl.read_data_zl_ecliplat()

    def get_zl_wavelength_at(self, wl):
        return ZodicalLight.function_from_table(self.zl_spec, wl)

    def get_zl_normalized_ecliplat_at(self, ecliplat):
        return ZodicalLight.function_from_table(self.zl_ecliplat,
                                                ecliplat) / ZL_ECLIPLAT_NORM

    def get_zl_at(self, wl, eclipat):
        try:
            f =  self.get_zl_wavelength_at(wl) * self.get_zl_normalized_ecliplat_at(eclipat)
        except TypeError:
            f = None
        return f

    @staticmethod
    def function_from_table(table_data, x):
        if len(table_data) < 2:
            raise ValueError
        xf_before = table_data[0][0]
        yf_before = table_data[0][1]
        for elms in table_data[1:]:
            if len(elms) < 2:
                raise ValueError
            xf = elms[0]
            yf = elms[1]
            if (xf_before <= x) and (x < xf):
                y = ZodicalLight.function_interpolate(xf_before, xf, yf_before, yf, x)
                return y
            xf_before = xf
            yf_before = yf
        return None

    @staticmethod
    def function_interpolate(xf_before, xf, yf_before, yf, x):
        y = (yf-yf_before)/(xf-xf_before)*(x-xf_before) + yf_before
        return y

if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.exit(1)
    wl = float(sys.argv[1])
    ecliplat = float(sys.argv[2])
    zl = ZodicalLight()
    zl.read_data_all()
    flux = zl.get_zl_at(1.25, 40.0)
    # print('{:13.4f}'.format(flux))

    lat = -90.0
    while (lat <= 90.0):
        flux = zl.get_zl_at(wl, lat)
        if flux is not None:
            print('{:13.4f} {:13.4f}'.format(lat, flux))
        lat += (5-1e-8)


'''
./zodicallight.py 1.25 0 > zod_1.25.xy
./zodicallight.py 0.75 0 > zod_0.75.xy
./zodicallight.py 1.75 0 > zod_1.75.xy
./zodicallight.py 2.25 0 > zod_2.25.xy
'''
