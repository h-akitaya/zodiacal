#!/usr/bin/env python3
'''
    Zodical light calculator
       Based on Tsumura-san's table
        Ver. 1.0  2020/11/02   H. Akitaya
        Ver. 1.1  2021/07/06   H. Akitaya; comments implemented
          Unit: lambda*I(lambda) [nW/m^2/sr]
        Ver. 1.2  2021/07/28   H. Akitaya; output with astropy.units
        Ver. 1.3  2021/07/29   H. Akitaya; integration in wavelength range; photon flux

   Sample usage:
       from zodicallight import ZodicalLight
       zd = ZodicalLight()
       zd(1.2, 0)
       714.1626404659994
'''

import os
import sys
import astropy.units as u
import astropy.constants as c

# Table of zodical light wavelength dependency
ZL_SPEC_FN = os.path.dirname(__file__) + '/' + 'ZLspectrum.txt'  

# Table of zodical light latitude dependency
ZL_ECLIPLAT_FN = os.path.dirname(__file__) + '/' + 'ZL_ecliptic_profile.txt'

# normalization flux (flux at ecliptic latitude at 0 deg)
ZL_ECLIPLAT_NORM = 691.82538

class ZodicalLight(object):
    ''' Class for Zodical Light Calculation.
    '''
    
    def __init__(self, data_read=True):
        self.zl_spec = []
        self.zl_ecliplat = []
        if data_read is True:
            self.read_data_all()

    def __call__(self, wl, lat, unit=False, photon=False):
        if unit is False:
            return self.get_zl_at(wl, lat)
        else:
            return self.get_zl_at(wl, lat) *(1e-9*u.W/(u.m**2)/u.sr)

    def __str__(self):
        return 'ZodicalLight(wl[um], latitude[deg]) [nW/m^2/str]'

    def read_data_zl_spec(self, fn=ZL_SPEC_FN):
        ''' Read zodical light table (wavelength dependency).
        '''
        with open(fn, 'r') as f:
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                items = line.strip().split()
                if len(items) != 3:
                    continue
                self.zl_spec.append([float(items[0]), float(items[1]),
                                     float(items[2])])

    def read_data_zl_ecliplat(self, fn=ZL_ECLIPLAT_FN):
        ''' Read zodical light table (latitude dependency).
        '''
        with open(fn, 'r') as f:
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                items = line.strip().split()
                if len(items) != 2:
                    continue
                self.zl_ecliplat.append([float(items[0]), float(items[1])])

    def read_data_all(self):
        ''' Read zodical light tables.
        '''
        self.read_data_zl_spec()
        self.read_data_zl_ecliplat()

    def get_zl_wavelength_at(self, wl):
        ''' Calculate scale of zodical light at wavelength wl.
        '''
        return self._function_from_table(self.zl_spec, wl)

    def get_zl_normalized_ecliplat_at(self, ecliplat):
        ''' Calculate scale of zodical light at latitude ecliplat.
        '''
        return self._function_from_table(self.zl_ecliplat,
                                                ecliplat) / ZL_ECLIPLAT_NORM

    def get_zl_at(self, wl, ecliplat, unit=False):
        ''' Calculate zodical light flux at wavelength wl and latitude ecliplat.
        '''
        try:
            f =  self.get_zl_wavelength_at(wl) * self.get_zl_normalized_ecliplat_at(ecliplat)
        except TypeError:
            sys.stderr.write('Zodical light calcuration error\n')
            raise(TypeError)
        if unit is False:
            return f
        else:
            return 1e-9 * f * (u.W/u.m**2/u.sr)  # [W/m^2/str]

    def get_zl_photonflux_at(self, wl, ecliplat, unit=False):
        ''' Calculate zodical light photon flux at wavelength wl and latitude ecliplat.
        '''
        pf = self.get_zl_at(wl, ecliplat, unit=True)
        pf_u = pf.to(u.photon/u.m**2/u.s/u.m, equivalencies=u.spectral_density(wl*u.um))
        if unit is False:
            return (pf_u.si).value
        else:
            return pf_u

    def _function_from_table(self, table_data, x):
        ''' Linear interporation for discrete values in a table.
        '''
        if len(table_data) < 2:
            raise ValueError
        xf_before = table_data[0][0]
        yf_before = table_data[0][1]
        for elms in table_data[1:]:
            if len(elms) < 2:
                raise ValueError
            xf = elms[0]
            yf = elms[1]
            if (xf_before <= x) and (x < xf):
                y = ZodicalLight.function_interpolate(xf_before, xf, yf_before, yf, x)
                return y
            xf_before = xf
            yf_before = yf
        return None

    @staticmethod
    def function_interpolate(xf_before, xf, yf_before, yf, x):
        ''' Calculate linear interporated value between two vectors.
        '''
        y = (yf-yf_before)/(xf-xf_before)*(x-xf_before) + yf_before
        return y

    @staticmethod
    def get_photon_energy(wl, unit=True):
        ''' Get phtoton energy fron wavelength wl (m).
        unit: True -> with astropy.units (J), False: w/o units.
        '''
        photon_energy = (c.h * c.c / (wl * u.m)).to(u.J)
        if unit is True:
            return photon_energy
        else:
            return photon_energy.value

if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.exit(1)
    wl = float(sys.argv[1])  # wavelength (um)
    ecliplat = float(sys.argv[2])  # latitude (deg)
    zl = ZodicalLight()
    zl.read_data_all()
    flux = zl.get_zl_at(1.25, 40.0)
    # print('{:13.4f}'.format(flux))

    lat = -90.0
    while (lat <= 90.0):
        flux = zl.get_zl_at(wl, lat)
        if flux is not None:
            print('{:13.4f} {:13.4f}'.format(lat, flux))
        lat += (5-1e-8)


'''
./zodicallight.py 1.25 0 > zod_1.25.xy
./zodicallight.py 0.75 0 > zod_0.75.xy
./zodicallight.py 1.75 0 > zod_1.75.xy
./zodicallight.py 2.25 0 > zod_2.25.xy
'''
